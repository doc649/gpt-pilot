# app/orchestrator.py

import time
import logging
from agents.agent import ProjectManager
from agents.watcher import watcher_loop

logger = logging.getLogger("Orchestrator")

class Orchestrator:
    def __init__(self):
        self.project_manager = ProjectManager()
    
    def supervise_project(self):
        logger.info("üß† Orchestrator d√©marr√© pour supervision ChefBotDZ...")

        # 1. Analyse initiale du projet
        logger.info("üìã Analyse initiale du projet...")
        results = self.project_manager.analyze_project()

        # 2. D√©cision intelligente bas√©e sur les r√©sultats
        pilot_analysis = results.get("pilot_analysis", "")
        
        if "probl√®me critique" in pilot_analysis.lower() or "erreur" in pilot_analysis.lower():
            logger.warning("üö® Probl√®me d√©tect√© dans le projet, correction prioritaire recommand√©e.")
        else:
            logger.info("‚úÖ Aucun probl√®me critique d√©tect√©, projet stable pour le moment.")

        # 3. D√©marrage du Watcher pour surveillance continue
        logger.info("üëÅÔ∏è Activation du Watcher pour surveillance en temps r√©el...")
        time.sleep(2)
        watcher_loop()

if __name__ == "__main__":
    orchestrator = Orchestrator()
    orchestrator.supervise_project()
